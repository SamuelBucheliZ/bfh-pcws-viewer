{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/address-data.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/code-request.ts","webpack:///./src/app/pcws-request/pcws-request.component.css","webpack:///./src/app/pcws-request/pcws-request.component.html","webpack:///./src/app/pcws-request/pcws-request.component.ts","webpack:///./src/app/pcws.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","export class AddressData {\n\n  constructor(\n    public name: string,\n    public address: string,\n    public zipCode: string,\n    public town: string\n  ) {}\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div style=\\\"text-align:center\\\">\\n  <h1>\\n    {{ title }}\\n  </h1>\\n  <app-pcws-request></app-pcws-request>\\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'PC-WS Viewer';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule }   from '@angular/forms';\nimport { HttpClientModule }    from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { PcwsRequestComponent } from './pcws-request/pcws-request.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PcwsRequestComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {AddressData} from \"./address-data\";\n\nexport class CodeRequest {\n  constructor(\n    public accountName: string,\n    public serviceType: string,\n    public addressData: AddressData\n  ) {}\n}\n","module.exports = \"img.barcode {\\n  padding:1px;\\n  border:1px solid #021a40;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGN3cy1yZXF1ZXN0L3Bjd3MtcmVxdWVzdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBVztFQUNYLHdCQUF3QjtBQUMxQiIsImZpbGUiOiJzcmMvYXBwL3Bjd3MtcmVxdWVzdC9wY3dzLXJlcXVlc3QuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImltZy5iYXJjb2RlIHtcbiAgcGFkZGluZzoxcHg7XG4gIGJvcmRlcjoxcHggc29saWQgIzAyMWE0MDtcbn1cbiJdfQ== */\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-5\\\">\\n      <form #inputForm=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n        <div class=\\\"form-group row\\\">\\n          <label for=\\\"pcwsUrl\\\" class=\\\"col-sm-2 col-form-label\\\">pcwsUrl</label>\\n          <div class=\\\"col-sm-10\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"pcwsUrl\\\" name=\\\"pcwsUrl\\\" [(ngModel)]=\\\"pcwsUrl\\\">\\n          </div>\\n        </div>\\n        <div class=\\\"form-group row\\\">\\n          <label for=\\\"accountName\\\" class=\\\"col-sm-2 col-form-label\\\">accountName</label>\\n          <div class=\\\"col-sm-10\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"accountName\\\" name=\\\"accountName\\\" [(ngModel)]=\\\"codeRequest.accountName\\\">\\n          </div>\\n        </div>\\n        <div class=\\\"form-group row\\\">\\n          <label for=\\\"serviceType\\\" class=\\\"col-sm-2 col-form-label\\\">serviceType</label>\\n          <div class=\\\"col-sm-10\\\">\\n            <select class=\\\"form-control\\\" name=\\\"serviceType\\\" id=\\\"serviceType\\\" [(ngModel)]=\\\"codeRequest.serviceType\\\">\\n              <option *ngFor=\\\"let serviceType of serviceTypes\\\" [value]=\\\"serviceType\\\">{{serviceType}}</option>\\n            </select>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group row\\\">\\n          <label for=\\\"name\\\" class=\\\"col-sm-2 col-form-label\\\">name</label>\\n          <div class=\\\"col-sm-10\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" name=\\\"name\\\" name=\\\"name\\\"\\n                   [(ngModel)]=\\\"codeRequest.addressData.name\\\">\\n          </div>\\n        </div>\\n        <div class=\\\"form-group row\\\">\\n          <label for=\\\"address\\\" class=\\\"col-sm-2 col-form-label\\\">address</label>\\n          <div class=\\\"col-sm-10\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"address\\\" name=\\\"address\\\" name=\\\"address\\\"\\n                   [(ngModel)]=\\\"codeRequest.addressData.address\\\">\\n          </div>\\n        </div>\\n        <div class=\\\"form-group row\\\">\\n          <label for=\\\"zipCode\\\" class=\\\"col-sm-2 col-form-label\\\">zipCode</label>\\n          <div class=\\\"col-sm-10\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"zipCode\\\" name=\\\"zipCode\\\" name=\\\"zipCode\\\"\\n                   [(ngModel)]=\\\"codeRequest.addressData.zipCode\\\">\\n          </div>\\n        </div>\\n        <div class=\\\"form-group row\\\">\\n          <label for=\\\"town\\\" class=\\\"col-sm-2 col-form-label\\\">town</label>\\n          <div class=\\\"col-sm-10\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"town\\\" name=\\\"town\\\" name=\\\"town\\\"\\n                   [(ngModel)]=\\\"codeRequest.addressData.town\\\">\\n          </div>\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Submit</button>\\n      </form>\\n    </div>\\n    <div class=\\\"col-6\\\">\\n      <div *ngIf=\\\"message\\\" class=\\\"alert alert-info\\\">{{message}}</div>\\n\\n      <img *ngIf=\\\"image\\\"\\n           [src]=\\\"image\\\"\\n           alt=\\\"Generated Barcode\\\"\\n           class=\\\"img-fluid barcode\\\">\\n    </div>\\n  </div>\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport {AddressData} from \"../address-data\";\nimport {CodeRequest} from \"../code-request\";\nimport {PcwsService} from \"../pcws.service\";\n\n@Component({\n  selector: 'app-pcws-request',\n  templateUrl: './pcws-request.component.html',\n  styleUrls: ['./pcws-request.component.css']\n})\nexport class PcwsRequestComponent implements OnInit {\n\n  serviceTypes = [\"ECONOMY\", \"PREMIUM\"];\n\n  message: String;\n  image: String;\n\n  pcwsUrl: string = 'https://bfh-pcws-mock.herokuapp.com/';\n  codeRequest: CodeRequest = new CodeRequest(\n    'allPermissions', 'PREMIUM',\n    new AddressData('Max Muster', 'Musterstrasse 11', '9999', 'Musterhausen'));\n\n  constructor(\n    private pcwsService: PcwsService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit() {\n    console.log(this.pcwsUrl);\n    console.log(this.codeRequest);\n    this.pcwsService.createCode(this.pcwsUrl, this.codeRequest).subscribe(\n      codeResponse => {\n        this.setValues(codeResponse.message, codeResponse.code);\n      },\n      error => {\n        console.log(error);\n        this.setValues(new Date().toISOString() + \": An error occurred while requesting the code\", null);\n      }\n    )\n  }\n\n  private setValues(message: String, code: String) {\n    if (message) {\n      this.message = message;\n    } else {\n      this.message = null;\n    }\n\n    if (code) {\n      this.image = \"data:image/png;base64,\" + code;\n    } else {\n      this.image = null;\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {CodeRequest} from \"./code-request\";\nimport {CodeResponse} from \"./code-response\";\nimport {Observable} from \"rxjs/internal/Observable\";\nimport {tap} from \"rxjs/operators\";\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PcwsService {\n\n  private createCodePath = 'createCode';\n\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  createCode(pswcUrl: string, codeRequest: CodeRequest): Observable<CodeResponse> {\n    const url = `${pswcUrl}/${this.createCodePath}`;\n    return this.httpClient.post<CodeResponse>(url, codeRequest, httpOptions).pipe(\n      tap(_ => this.log(`calling ${url} with ${codeRequest}`))\n    );\n  }\n\n  private log(message: string) {\n    console.log(message);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}